import requests
import json
from datetime import datetime
import firebase_admin
from firebase_admin import credentials, firestore
from firebase_admin import exceptions as firebase_exceptions

# --- C·∫•u h√¨nh API Myfxbook ---
# ‚ö†Ô∏è THAY TH·∫æ B·∫∞NG TH√îNG TIN TH·ª∞C T·∫æ C·ª¶A B·∫†N
MY_EMAIL = "hai12b3@gmail.com"  
MY_PASSWORD = "Hadeshai5"        
LOGIN_API = f"https://www.myfxbook.com/api/login.json?email={MY_EMAIL}&password={MY_PASSWORD}"
GET_ACCOUNTS_API_BASE = "https://www.myfxbook.com/api/get-my-accounts.json"
GET_OPEN_TRADES_API_BASE = "https://www.myfxbook.com/api/get-open-trades.json"

# --- C·∫•u h√¨nh Firebase ---
SERVICE_ACCOUNT_FILE = 'datafx-45432-firebase-adminsdk-fbsvc-3132a63c50.json' 
COLLECTION_NAME = 'myfxbook_snapshots'              # Collection l∆∞u d·ªØ li·ªáu t√†i kho·∫£n t·ªïng quan
OPEN_TRADES_SUMMARY_COLLECTION = 'myfxbook_trades_summary' # Collection l∆∞u m·∫£ng t√≥m t·∫Øt l·ªánh m·ªü
SESSION_DOC_ID = 'current_session'                  # ID document cho b·∫£n latest/dashboard
SUMMARY_DOC_PREFIX = 'summary_snapshot'             # Ti·ªÅn t·ªë cho document l∆∞u m·∫£ng t√≥m t·∫Øt l·ªãch s·ª≠

def initialize_firebase():
    """Kh·ªüi t·∫°o Firebase Admin SDK."""
    try:
        if not firebase_admin._apps:
            cred = credentials.Certificate(SERVICE_ACCOUNT_FILE)
            firebase_admin.initialize_app(cred)
        print("‚úÖ K·∫øt n·ªëi Firebase th√†nh c√¥ng.")
        return firestore.client()
    except firebase_exceptions.FirebaseError as fe:
        print(f"‚ùå L·ªñI FIREBASE C·ª§ TH·ªÇ: Kh√¥ng th·ªÉ kh·ªüi t·∫°o. Vui l√≤ng ki·ªÉm tra file kh√≥a: {fe}")
        raise
    except Exception as e:
        print(f"‚ùå L·ªñI KH·ªûI T·∫†O CHUNG: {e}")
        raise

def get_session_id():
    """L·∫•y Session ID b·∫±ng c√°ch ƒëƒÉng nh·∫≠p."""
    print("\n‚è≥ ƒêang ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y Session ID...")
    try:
        response = requests.get(LOGIN_API, timeout=30) 
        response.raise_for_status() # B√°o l·ªói HTTP n·∫øu c√≥
        data = response.json()
        
        is_success = data.get('session') and (data.get('error') is False or data.get('error') is None)
        
        if is_success:
            session_id = data['session']
            print(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Session ID: **{session_id[:10]}...**")
            return session_id
        else:
            print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. M√£ ph·∫£n h·ªìi JSON (Ki·ªÉm tra Email/Password):")
            print(json.dumps(data, indent=4))
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªñI K·∫æT N·ªêI API Myfxbook (ƒêƒÉng nh·∫≠p): {e}")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå L·ªñI PH√ÇN T√çCH JSON: Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá. N·ªôi dung: {response.text[:100]}...")
        return None


def fetch_data(api_url, session_id, **params): 
    """L·∫•y d·ªØ li·ªáu t·ª´ API Myfxbook."""
    full_url = f"{api_url}?session={session_id}"
    
    if params:
        for key, value in params.items():
            full_url += f"&{key}={value}"
    
    # ‚ÑπÔ∏è In ra URL ƒë·ªÉ debug (t√πy ch·ªçn)
    # print(f"    -> G·ªçi API: {full_url}")

    try:
        response = requests.get(full_url, timeout=30)
        
        if response.status_code != 200:
            print(f"‚ùå L·ªói HTTP: Status Code {response.status_code} khi g·ªçi {api_url}")
            response.raise_for_status()
            
        data = response.json()
        
        if data.get('error') and data.get('error') is not False:
            print(f"‚ùå API b√°o l·ªói khi g·ªçi {api_url}: {data['error']}")
            return None 
            
        return data 
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªñI K·∫æT N·ªêI API Myfxbook ({api_url}): {e}")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå L·ªñI PH√ÇN T√çCH JSON: Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá t·ª´ {api_url}.")
        return None

def find_account_list(data):
    """T√¨m m·∫£ng d·ªØ li·ªáu t√†i kho·∫£n trong ph·∫£n h·ªìi JSON th√¥."""
    if not isinstance(data, dict):
        return []
    
    # Myfxbook th∆∞·ªùng d√πng key 'accounts' ho·∫∑c 'openTrades'
    if 'accounts' in data and isinstance(data['accounts'], list):
        return data['accounts']
    
    # Tr∆∞·ªùng h·ª£p chung: t√¨m list kh√¥ng r·ªóng ch·ª©a dict v·ªõi c√°c key ƒë·∫∑c tr∆∞ng
    for key, value in data.items():
        if isinstance(value, list) and value and isinstance(value[0], dict):
            account_keys = {'id', 'name', 'balance', 'equity'} 
            if account_keys.issubset(value[0].keys()):
                 return value
                 
    return []

def save_snapshot_to_firestore(db, raw_data):
    """
    L∆∞u to√†n b·ªô d·ªØ li·ªáu snapshot th√¥ v√†o Firestore.
    L∆∞u 2 b·∫£n: Latest (Dashboard) v√† History (Timestamp ID).
    """
    accounts_list = find_account_list(raw_data)
    num_accounts = len(accounts_list) if accounts_list else 0
    
    if num_accounts == 0:
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y danh s√°ch t√†i kho·∫£n h·ª£p l·ªá trong ph·∫£n h·ªìi API.")
        return

    try:
        current_time = datetime.now()
        timestamp_str = current_time.isoformat()
        
        # ‚ö†Ô∏è S·ª≠a ƒë·ªïi ƒë·ªÉ l∆∞u TO√ÄN B·ªò ph·∫£n h·ªìi th√¥ v√†o tr∆∞·ªùng 'data'
        document_data = {
            'timestamp': timestamp_str,
            'source_api': 'myfxbook_get_my_accounts', # Th√™m tr∆∞·ªùng n√†y gi·ªëng laysession
            'accounts_count': num_accounts,           # Th√™m tr∆∞·ªùng n√†y gi·ªëng laysession
            'data': raw_data,                         # L∆∞u ph·∫£n h·ªìi th√¥ (ch·ª©a kh√≥a 'accounts')
            'success': raw_data.get('error') is False
        }
        
        # 1. L∆∞u v√†o document dashboard (latest)
        doc_ref_latest = db.collection(COLLECTION_NAME).document(SESSION_DOC_ID)
        doc_ref_latest.set(document_data)
        
        # 2. L∆∞u v√†o history
        history_doc_id = f'snapshot-{current_time.strftime("%Y%m%d%H%M%S")}' # Gi·ªëng ƒë·ªãnh d·∫°ng laysession
        history_doc_ref = db.collection(COLLECTION_NAME).document(history_doc_id)
        history_doc_ref.set(document_data)
        
        print(f"‚úÖ D·ªØ li·ªáu t·ªïng quan c·ªßa **{num_accounts}** t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o Firestore.")
        print(f"   ID Dashboard: {SESSION_DOC_ID}, ID History: {history_doc_id}")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u Snapshot v√†o Firestore: {e}")

def save_open_trades_summary(db, open_trades_data):
    """
    T·∫°o m·∫£ng t√≥m t·∫Øt s·ªë l·ªánh ƒëang m·ªü v√† l∆∞u v√†o document l·ªãch s·ª≠ m·ªõi.
    """
    # API get-open-trades.json tr·∫£ v·ªÅ JSON c√≥ key 'accounts' ch·ª©a m·∫£ng
    accounts_with_trades_list = open_trades_data.get('accounts', []) 
    
    open_trades_summary_list = []
    
    if accounts_with_trades_list:
        for acc in accounts_with_trades_list:
            account_id_long = acc.get('id') 
            trades = acc.get('openTrades', []) # API get-open-trades s·ª≠ d·ª•ng key 'openTrades'
            
            if account_id_long:
                # T·∫°o m·ª•c t√≥m t·∫Øt
                summary_item = {
                    'account_id': account_id_long, 
                    'open_trades_count': len(trades)
                }
                open_trades_summary_list.append(summary_item)

        
        if open_trades_summary_list:
            try:
                current_time = datetime.now()
                timestamp_str = current_time.isoformat()
                
                summary_document = {
                    'timestamp': timestamp_str,
                    'source_api': 'myfxbook_open_trades_summary', # Gi·ªëng laysession
                    'accounts_count': len(open_trades_summary_list),
                    'data': open_trades_summary_list,             # ƒê√¢y l√† m·∫£ng JSON t√≥m t·∫Øt
                    'success': open_trades_data.get('error') is False
                }
                
                # S·ª≠ d·ª•ng timestamp l√†m ID document l·ªãch s·ª≠ v·ªõi ti·ªÅn t·ªë
                doc_id = f'{SUMMARY_DOC_PREFIX}-{current_time.strftime("%Y%m%d%H%M%S")}'
                doc_ref = db.collection(OPEN_TRADES_SUMMARY_COLLECTION).document(doc_id)
                doc_ref.set(summary_document)
                
                print("‚úÖ M·∫£ng JSON T√≥m T·∫Øt L·ªánh ƒêang M·ªü ƒê√£ T·∫°o:")
                print(json.dumps(open_trades_summary_list, indent=4))
                print(f"‚úÖ ƒê√£ l∆∞u M·∫£ng T√≥m T·∫Øt th√†nh c√¥ng v√†o Collection '{OPEN_TRADES_SUMMARY_COLLECTION}' v·ªõi ID: {doc_id}")
                
            except Exception as e:
                print(f"‚ùå L·ªói khi l∆∞u M·∫£ng T√≥m T·∫Øt v√†o Firestore: {e}")
    else:
        print("‚ö†Ô∏è B·ªè qua b∆∞·ªõc L∆∞u M·∫£ng T√≥m T·∫Øt: Kh√¥ng c√≥ d·ªØ li·ªáu l·ªánh ƒëang m·ªü h·ª£p l·ªá.")


def run_data_collection():
    """Th·ª±c hi·ªán to√†n b·ªô quy tr√¨nh thu th·∫≠p v√† l∆∞u d·ªØ li·ªáu."""
    
    account_ids_list = []
    
    print("\n" + "=" * 50)
    print(f"üé¨ B·∫ÆT ƒê·∫¶U V√íNG CH·∫†Y l√∫c: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)

    try:
        # 1. Kh·ªüi t·∫°o Firebase
        db = initialize_firebase()
        
        # 2. ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y Session ID
        session_id = get_session_id()
        if not session_id:
            print("‚ùå Kh√¥ng c√≥ Session ID, d·ª´ng quy tr√¨nh.")
            return

        # 3. L·∫•y d·ªØ li·ªáu Snapshot t√†i kho·∫£n
        print("-" * 40)
        print("‚è≥ ƒêang l·∫•y d·ªØ li·ªáu Snapshot T√†i kho·∫£n...")
        account_snapshot_data = fetch_data(GET_ACCOUNTS_API_BASE, session_id) 
        
        if account_snapshot_data:
            # L∆∞u d·ªØ li·ªáu Snapshot
            save_snapshot_to_firestore(db, account_snapshot_data)
                
            # TR√çCH XU·∫§T T·∫§T C·∫¢ ACCOUNT ID cho b∆∞·ªõc ti·∫øp theo
            accounts_list = find_account_list(account_snapshot_data)
            account_ids_list = [
                str(acc.get('id')) for acc in accounts_list
                if acc.get('id') is not None
            ]
            
            if not account_ids_list:
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ ID t√†i kho·∫£n n√†o ƒë·ªÉ l·∫•y l·ªánh ƒëang m·ªü.")
                return

        else:
             print("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu Snapshot T√†i kho·∫£n. B·ªè qua c√°c b∆∞·ªõc ti·∫øp theo.")
             return

        # 4. L·∫•y d·ªØ li·ªáu L·ªánh ƒêang M·ªü (Open Trades)
        print("-" * 40)
        print("‚è≥ ƒêang l·∫•y d·ªØ li·ªáu L·ªánh ƒêang M·ªü...")
        
        # G·∫ÆN THAM S·ªê accountIds = chu·ªói c√°c ID c√°ch nhau b·∫±ng d·∫•u ph·∫©y
        account_ids_param = ",".join(account_ids_list)
        
        open_trades_data = fetch_data(
            GET_OPEN_TRADES_API_BASE, 
            session_id, 
            accountIds=account_ids_param 
        )
        
        # 5. L∆∞u m·∫£ng t√≥m t·∫Øt L·ªánh ƒêang M·ªü
        print("-" * 40)
        if open_trades_data:
            save_open_trades_summary(db, open_trades_data)
        else:
            print("‚ö†Ô∏è B·ªè qua b∆∞·ªõc L∆∞u M·∫£ng T√≥m T·∫Øt: Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu l·ªánh ƒëang m·ªü.")

    except Exception as e:
        print(f"\n‚ÄºÔ∏è L·ªñI NGHI√äM TR·ªåNG TRONG QU√Å TR√åNH CH·∫†Y: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")

    print("\n" + "-" * 40)
    print("üèÅ Quy tr√¨nh cho v√≤ng ch·∫°y n√†y ho√†n t·∫•t.")


# --- TH·ª∞C THI (MAIN EXECUTION) ---
if __name__ == '__main__':
    
    print("\n" + "#" * 60)
    print("üöÄ B·∫Øt ƒë·∫ßu Ch·∫ø ƒë·ªô Ch·∫°y M·ªôt L·∫ßn theo L·ªãch tr√¨nh (GitHub Actions).")
    print("#" * 60)
    
    try:
        run_data_collection() 
    
    except Exception as e:
        print(f"\n‚ÄºÔ∏è FATAL ERROR: L·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra: {e}")
    
    print("\n" + "~" * 60)
    print("üèÅ T·∫≠p l·ªánh ƒë√£ ho√†n th√†nh v√† s·∫Ω k·∫øt th√∫c.")
    print("~" * 60)
