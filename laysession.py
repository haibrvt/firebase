import requests
import json
from datetime import datetime
import firebase_admin
from firebase_admin import credentials, firestore
from firebase_admin import exceptions as firebase_exceptions

# --- C·∫•u h√¨nh API Myfxbook ---
# ‚ö†Ô∏è THAY TH·∫æ B·∫∞NG TH√îNG TIN TH·ª∞C T·∫æ C·ª¶A B·∫†N
MY_EMAIL = "hai12b3@gmail.com"  
MY_PASSWORD = "Hadeshai5"        
LOGIN_API = f"https://www.myfxbook.com/api/login.json?email={MY_EMAIL}&password={MY_PASSWORD}"
GET_ACCOUNTS_API_BASE = "https://www.myfxbook.com/api/get-my-accounts.json"
GET_OPEN_TRADES_API_BASE = "https://www.myfxbook.com/api/get-open-trades.json"

# --- C·∫•u h√¨nh Firebase ---
SERVICE_ACCOUNT_FILE = 'datafx-45432-firebase-adminsdk-fbsvc-3132a63c50.json' 
COLLECTION_NAME = 'myfxbook_snapshots'      
OPEN_TRADES_SUMMARY_COLLECTION = 'myfxbook_trades_summary' 
SESSION_DOC_ID = 'current_session'          
TRADES_DOC_ID = 'current_trades_summary'     

def initialize_firebase():
    """Kh·ªüi t·∫°o Firebase Admin SDK."""
    try:
        if not firebase_admin._apps:
            cred = credentials.Certificate(SERVICE_ACCOUNT_FILE)
            firebase_admin.initialize_app(cred)
        return firestore.client()
    except firebase_exceptions.FirebaseError as fe:
        print(f"‚ùå L·ªñI FIREBASE C·ª§ TH·ªÇ: Kh√¥ng th·ªÉ kh·ªüi t·∫°o. Vui l√≤ng ki·ªÉm tra file kh√≥a {SERVICE_ACCOUNT_FILE} v√† Secret: {fe}")
        raise
    except Exception as e:
        print(f"‚ùå L·ªñI KH·ªûI T·∫†O CHUNG: {e}")
        raise

def get_session_id():
    """L·∫•y Session ID b·∫±ng c√°ch ƒëƒÉng nh·∫≠p."""
    print("‚è≥ ƒêang ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y Session ID...")
    try:
        response = requests.get(LOGIN_API, timeout=30) 
        
        if response.status_code != 200:
            print(f"‚ùå L·ªói HTTP: Status Code {response.status_code}. Ph·∫£n h·ªìi c·ªßa server: {response.text}")
            response.raise_for_status()
        
        data = response.json()
        
        # üü¢ LOGIC KI·ªÇM TRA TH√ÄNH C√îNG ƒê√É ƒê∆Ø·ª¢C S·ª¨A: 
        # API tr·∫£ v·ªÅ Session ID v√† 'error': false.
        # Ki·ªÉm tra n·∫øu tr∆∞·ªùng 'session' c√≥ gi√° tr·ªã V√Ä tr∆∞·ªùng 'error' KH√îNG ph·∫£i l√† True.
        is_success = data.get('session') and (data.get('error') is False or data.get('error') is None)
        
        if is_success:
            session_id = data['session']
            print(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Session ID: {session_id[:10]}...")
            return session_id
        else:
            # In ra to√†n b·ªô th√¥ng b√°o l·ªói JSON t·ª´ Myfxbook n·∫øu ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
            print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. M√£ ph·∫£n h·ªìi JSON (Ki·ªÉm tra Email/Password):")
            print(json.dumps(data, indent=4))
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå L·ªñI M·∫†NG: ƒêƒÉng nh·∫≠p b·ªã Timeout (Qu√° 30 gi√¢y).")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªñI K·∫æT N·ªêI API Myfxbook (ƒêƒÉng nh·∫≠p): {e}")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå L·ªñI PH√ÇN T√çCH JSON: Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá. N·ªôi dung: {response.text[:100]}...")
        return None


def fetch_data(api_url, session_id):
    """L·∫•y d·ªØ li·ªáu t·ª´ API Myfxbook."""
    full_url = f"{api_url}?session={session_id}"
    try:
        response = requests.get(full_url, timeout=30)
        
        if response.status_code != 200:
            print(f"‚ùå L·ªói HTTP: Status Code {response.status_code} khi g·ªçi {api_url}")
            response.raise_for_status()
            
        data = response.json()
        
        # Ki·ªÉm tra n·∫øu API b√°o l·ªói trong ph·∫£n h·ªìi JSON
        if data.get('error') is True:
            print(f"‚ùå API b√°o l·ªói khi g·ªçi {api_url}. JSON ph·∫£n h·ªìi:")
            print(json.dumps(data, indent=4))
            return None 
            
        return data 
        
    except requests.exceptions.Timeout:
        print(f"‚ùå L·ªñI M·∫†NG: G·ªçi API {api_url} b·ªã Timeout.")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªñI K·∫æT N·ªêI API Myfxbook ({api_url}): {e}")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå L·ªñI PH√ÇN T√çCH JSON: Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá t·ª´ {api_url}. N·ªôi dung: {response.text[:100]}...")
        return None

def save_snapshot_to_firestore(db, data):
    """L∆∞u d·ªØ li·ªáu snapshot v√†o Firestore."""
    try:
        current_time = datetime.now()
        timestamp_str = current_time.isoformat()
        document_data = {
            'timestamp': timestamp_str,
            'data': data.get('accounts', []),
            'success': data.get('success', True) # Gi·∫£ ƒë·ªãnh success l√† true v√¨ ƒë√£ l·ªçc l·ªói ·ªü fetch_data
        }
        doc_ref = db.collection(COLLECTION_NAME).document(SESSION_DOC_ID)
        doc_ref.set(document_data)
        history_doc_id = current_time.strftime("%Y%m%d_%H%M%S")
        history_doc_ref = db.collection(COLLECTION_NAME).document(history_doc_id)
        history_doc_ref.set(document_data)
        print(f"‚úÖ ƒê√£ l∆∞u Snapshot th√†nh c√¥ng. ID Dashboard: {SESSION_DOC_ID}, ID History: {history_doc_id}")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u Snapshot v√†o Firestore: {e}")

def save_open_trades_summary(db, open_trades_data):
    """T·∫°o v√† l∆∞u m·∫£ng t√≥m t·∫Øt s·ªë l·ªánh ƒëang m·ªü v√†o collection ri√™ng."""
    accounts_with_trades = {}
    
    if open_trades_data and open_trades_data.get('accounts'):
        for acc in open_trades_data['accounts']:
            account_id_long = acc.get('id') 
            trades = acc.get('trades', [])
            if account_id_long:
                short_id_match = str(account_id_long).split('-')[0]
                accounts_with_trades[short_id_match] = {
                    'account_id': account_id_long,
                    'open_trades_count': len(trades)
                }

        open_trades_summary_list = list(accounts_with_trades.values())
        
        if open_trades_summary_list:
            try:
                current_time = datetime.now()
                doc_id = TRADES_DOC_ID
                summary_document = {
                    'timestamp': current_time.isoformat(),
                    'data': open_trades_summary_list,
                    'success': True
                }
                doc_ref = db.collection(OPEN_TRADES_SUMMARY_COLLECTION).document(doc_id)
                doc_ref.set(summary_document)
                print("‚úÖ M·∫£ng JSON T√≥m T·∫Øt L·ªánh ƒêang M·ªü ƒê√£ T·∫°o:")
                print(json.dumps(open_trades_summary_list, indent=4))
                print(f"‚úÖ ƒê√£ l∆∞u M·∫£ng T√≥m T·∫Øt th√†nh c√¥ng v√†o Collection '{OPEN_TRADES_SUMMARY_COLLECTION}' v·ªõi ID: {doc_id}")
                
            except Exception as e:
                print(f"‚ùå L·ªói khi l∆∞u M·∫£ng T√≥m T·∫Øt v√†o Firestore: {e}")
    else:
        print("‚ö†Ô∏è B·ªè qua b∆∞·ªõc L∆∞u M·∫£ng T√≥m T·∫Øt: Danh s√°ch r·ªóng.")

def run_data_collection():
    """Th·ª±c hi·ªán to√†n b·ªô quy tr√¨nh thu th·∫≠p v√† l∆∞u d·ªØ li·ªáu."""
    try:
        # 1. Kh·ªüi t·∫°o Firebase
        db = initialize_firebase()
        
        # 2. ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y Session ID
        session_id = get_session_id()
        if not session_id:
            print("‚ùå Kh√¥ng c√≥ Session ID, d·ª´ng quy tr√¨nh.")
            return

        # 3. L·∫•y d·ªØ li·ªáu Snapshot t√†i kho·∫£n
        print("‚è≥ ƒêang l·∫•y d·ªØ li·ªáu Snapshot T√†i kho·∫£n...")
        account_snapshot_data = fetch_data(GET_ACCOUNTS_API_BASE, session_id)
        
        if account_snapshot_data: 
            print(f"‚úÖ ƒê√£ t·∫£i v·ªÅ {len(account_snapshot_data.get('accounts', []))} t√†i kho·∫£n.")
            save_snapshot_to_firestore(db, account_snapshot_data)
        else:
            # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c in ra trong h√†m fetch_data
            pass 

        # 4. L·∫•y d·ªØ li·ªáu L·ªánh ƒêang M·ªü (Open Trades)
        print("‚è≥ ƒêang l·∫•y d·ªØ li·ªáu L·ªánh ƒêang M·ªü...")
        open_trades_data = fetch_data(GET_OPEN_TRADES_API_BASE, session_id)
        
        if open_trades_data:
            save_open_trades_summary(db, open_trades_data)
        else:
            # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c in ra trong h√†m fetch_data
            pass

    except Exception as e:
        print(f"‚ÄºÔ∏è L·ªñI NGHI√äM TR·ªåNG TRONG QU√Å TR√åNH CH·∫†Y: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")

    print("-" * 40)
    print("üèÅ Quy tr√¨nh cho v√≤ng ch·∫°y n√†y ho√†n t·∫•t.")


# --- TH·ª∞C THI (MAIN EXECUTION) ---
if __name__ == '__main__':
    
    print("\n" + "#" * 60)
    print("üöÄ B·∫Øt ƒë·∫ßu Ch·∫ø ƒë·ªô Ch·∫°y M·ªôt L·∫ßn theo L·ªãch tr√¨nh (GitHub Actions).")
    print("#" * 60)
    
    try:
        run_data_collection() 
    
    except Exception as e:
        print(f"\n‚ÄºÔ∏è FATAL ERROR: L·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra: {e}")
    
    print("\n" + "~" * 60)
    print("üèÅ T·∫≠p l·ªánh ƒë√£ ho√†n th√†nh v√† s·∫Ω k·∫øt th√∫c.")
    print("~" * 60)
